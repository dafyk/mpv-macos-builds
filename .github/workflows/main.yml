name: build

on:
  push:
    branches:
      - main
  #schedule:
    # nightly build
    #- cron: "00 12 * * *"

jobs:
  build:
    runs-on: macos-latest
    env:
      CC: clang
      CXX: clang++
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    steps:
    - name: Get current timestamp
      id: timestamp
      run: |
        echo "::set-output name=timestamp::$(date +%s)"
        echo "::set-output name=date::$(date +%Y%m%d)"

    - name: Get latest git tag
      id: git_tag
      uses: oprypin/find-latest-tag@v1
      with:
        repository: dafyk/mpv-macos-builds
        releases-only: false

    - name: Checkout mpv-player/mpv
      uses: actions/checkout@v2
      with:
        repository: 'mpv-player/mpv'
        fetch-depth: 0

    - name: Check upstream version
      id: upstream_tag
      run: |
        git fetch
        sed -i .bak 's/--dirty//g' version.sh
        echo "::set-output name=build_hash::$(sh version.sh)"

    - name: Install dependencies
      if: ${{ success() && steps.upstream_tag.outputs.build_hash != steps.git_tag.outputs.tag }}
      run: |
        echo "Force brew install for 10.13"
        export MACOSX_DEPLOYMENT_TARGET="10.13"
        brew update-reset
        brew tap homebrew-ffmpeg/ffmpeg
        brew update
        path="$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula"
        for dep in $(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/*.rb; do sed -i "" $'s/def install/def install\\\n    ENV["MACOSX_DEPLOYMENT_TARGET"] = "10.13"\\\n/' $dep;done
        for dep in luajit python@3.8; do sed -i "" $'s/MacOS.version/"10.13"/' $path/$dep.rb;done
        sed -i "" $'s/--enable-demuxer=dash/--enable-demuxer=dash\\\n      --disable-doc\\\n      --enable-static\\\n      --enable-nonfree/' $(brew --repository)/Library/Taps/homebrew-ffmpeg/homebrew-ffmpeg/Formula/ffmpeg.rb
        sed -i "" $'s/inreplace/#inreplace/' $(brew --repository)/Library/Taps/homebrew-ffmpeg/homebrew-ffmpeg/Formula/ffmpeg.rb
        echo "Install packages from source. ATTN: order matters"
        brew uninstall --ignore-dependencies --force openssl
        brew cleanup
        brew reinstall -s openssl@1.1
        brew reinstall -s lz4
        brew reinstall -s xz
        brew reinstall -s zstd
        brew reinstall -s pkg-config
        brew reinstall -s python@3.8
        export PKG_CONFIG_PATH="/usr/local/opt/python@3.8/lib/pkgconfig:$PKG_CONFIG_PATH"
        brew reinstall -s libffi
        export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig:$PKG_CONFIG_PATH"
        brew reinstall -s libpng
        brew reinstall -s freetype
        brew reinstall -s fontconfig
        brew reinstall -s pcre
        brew reinstall -s glib
        brew reinstall -s gmp
        brew reinstall -s libunistring
        brew reinstall -s libidn2
        brew reinstall -s nettle
        brew reinstall -s gettext
        brew reinstall -s jpeg
        brew reinstall -s libtiff
        brew reinstall -s little-cms2
        brew reinstall -s libtasn1
        brew reinstall -s gnutls
        brew reinstall -s p11-kit
        brew reinstall -s rtmpdump
        brew reinstall -s sdl2
        brew reinstall -s libb2
        brew reinstall -s libbluray
        brew reinstall -s fribidi
        brew reinstall -s giflib
        brew reinstall -s graphite2
        brew reinstall -s harfbuzz
        brew reinstall -s x264
        brew reinstall -s x265
        brew reinstall -s docutils
        brew reinstall -s libarchive
        brew install libass --HEAD
        brew install luajit --HEAD
        brew reinstall -s mujs
        brew reinstall -s uchardet
        brew reinstall -s youtube-dl
        brew reinstall -s zimg
        brew reinstall -s openjpeg
        brew reinstall -s lame
        brew reinstall -s webp
        brew reinstall -s leptonica
        brew reinstall -s srt
        brew reinstall -s libogg
        brew reinstall -s speex
        brew reinstall -s tesseract
        brew reinstall -s xvid
        brew reinstall -s snappy
        brew reinstall -s libvorbis
        brew reinstall -s flac
        brew reinstall -s libsndfile
        brew reinstall -s libsamplerate
        brew reinstall -s rubberband
        brew reinstall -s opus
        brew reinstall -s opencore-amr
        brew reinstall -s libvpx
        brew reinstall -s libvidstab
        brew reinstall -s libsoxr
        brew reinstall -s frei0r
        brew reinstall -s aom
        brew reinstall -s theora
        brew reinstall -s dav1d
        brew reinstall -s rav1e
        brew reinstall -s fdk-aac
        brew reinstall -s libbs2b
        brew reinstall -s libgsm
        brew reinstall -s libmodplug
        brew reinstall -s librsvg
        brew reinstall -s libvmaf
        brew reinstall -s libxml2
        brew reinstall -s zeromq

        brew reinstall homebrew-ffmpeg/ffmpeg/ffmpeg --build-from-source --HEAD --with-fdk-aac --with-libbluray --with-libbs2b --with-libgsm --with-libmodplug --with-librsvg --with-libsoxr --with-libssh --with-libvidstab --with-libvmaf --with-libxml2 --with-opencore-amr --with-openh264 --with-openjpeg --with-openssl --with-openssl@1.1 --with-rav1e --with-rtmpdump --with-rubberband --with-speex --with-srt --with-tesseract --with-two-lame --with-webp --with-xvid --with-zeromq --with-zimg


    - name: Build binary
      id: build_binary
      if: ${{ success() && steps.upstream_tag.outputs.build_hash != steps.git_tag.outputs.tag }}
      run: |
        git pull
        git fetch
        echo "::set-output name=build_hash::$(sh version.sh)"
        export PKG_CONFIG_PATH="/usr/local/opt/libarchive/lib/pkgconfig/:$PKG_CONFIG_PATH"
        export MACOSX_DEPLOYMENT_TARGET="10.13"
        export EXTRA_CFLAGS="-mmacosx-version-min=10.13"
        export EXTRA_CXXFLAGS="-mmacosx-version-min=10.13"
        export EXTRA_LDFLAGS="-mmacosx-version-min=10.13"
        mv VERSION VERSION.bak
        python3 bootstrap.py
        python3 waf configure -v --libmpv-shared --libmpv-static
        python3 waf
        python3 TOOLS/osxbundle.py build/mpv
        mv version.sh.bak version.sh
        mkdir -p release
        cp -r build/mpv.app release

    - name: Build Apple Disk Image
      if: ${{ success() && steps.upstream_tag.outputs.build_hash != steps.git_tag.outputs.tag }}
      run: |
        brew install create-dmg
        create-dmg --sandbox-safe --no-internet-enable --volname "mpv" --app-drop-link 200 185 mpv.dmg release
        rm -rf release/mpv.app
        mv mpv.dmg release/

    - name: Create Release
      id: create_release
      if: ${{ success() && steps.upstream_tag.outputs.build_hash != steps.git_tag.outputs.tag }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.upstream_tag.outputs.build_hash }}
        release_name: mpv nightly build ${{ steps.timestamp.outputs.date }}
        body: |
            mpv nightly build
            build date: ${{ steps.timestamp.outputs.date }}
            version: ${{ steps.upstream_tag.outputs.build_hash }}
            OS support: macOS High Sierra 10.13 or later
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      if: ${{ success() && steps.upstream_tag.outputs.build_hash != steps.git_tag.outputs.tag }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/mpv.dmg
        asset_name: mpv-nightly-${{ steps.upstream_tag.outputs.build_hash }}.dmg
        asset_content_type: application/x-apple-diskimage
